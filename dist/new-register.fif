"Asm.fif" include
// automatically generated from `./src/crypto/lib/stdlib.fc` `./src/crypto/register.fc` 
PROGRAM{
  DECLPROC save_internal_data
  DECLPROC load_internal_data
  DECLPROC create_student
  DECLPROC get_student
  DECLPROC create_mark
  DECLPROC recv_internal
  DECLPROC recv_external
  108431 DECLMETHOD student_marks
  82957 DECLMETHOD students
  85143 DECLMETHOD seqno
  71178 DECLMETHOD info
  save_internal_data PROC:<{
    NEWC
    s1 s5 XCHG
    32 STU
    s1 s3 XCHG
    256 STU
    256 STU
    STDICT
    STREF
    ENDC
    c4 POP
  }>
  load_internal_data PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    256 LDU
    256 LDU
    LDDICT
    LDREF
    DROP
  }>
  create_student PROC:<{
    NEWDICT
    NEWC
    STDICT
    32 PUSHINT
    s1 s3 XCHG
    DICTUSETB
  }>
  get_student PROC:<{
    32 PUSHINT
    s1 s2 XCHG
    DICTUGET
    NULLSWAPIFNOT
    IFNOTJMP:<{
      DROP
      PUSHNULL
      0 PUSHINT
    }>
    LDDICT
    DROP
    -1 PUSHINT
  }>
  create_mark PROC:<{
    NEWC
    s1 s3 XCHG
    8 STU
    STREF
    NOW
    32 PUSHINT
    s2 s3 XCHG
    s1 s2 XCHG
    DICTUSETB
  }>
  recv_internal PROC:<{
    DROP
    -1 PUSHINT
  }>
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    LDREF
    DROP
    load_internal_data CALLDICT
    s5 PUSH
    CTOS
    4 LDU
    32 LDU
    s7 PUSH
    SWAP
    s0 s2 XCHG
    EQUAL
    35 THROWIFNOT
    s0 s6 XCHG
    INC
    OVER
    0 EQINT
    IFJMP:<{
      NIP
      s5 POP
      s4 PUSH
      1 EQINT
      11 THROWIFNOT
      s0 s5 XCHG
      HASHCU
      SWAP
      s0 s6 XCHG
      s3 PUSH
      CHKSIGNU
      34 THROWIFNOT
      ACCEPT
      s2 s4 XCHG
      s1 s3 XCHG
      s0 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    1 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      HASHCU
      SWAP
      s0 s7 XCHG
      s4 PUSH
      CHKSIGNU
      34 THROWIFNOT
      s0 s3 XCHG
      32 LDU
      s4 PUSH
      s2 PUSH
      get_student CALLDICT
      38 THROWIFNOT
      SWAP
      8 LDU
      LDREF
      DROP
      ACCEPT
      s1 s2 XCHG
      SWAP
      create_mark CALLDICT
      NEWC
      STDICT
      32 PUSHINT
      s1 s3 XCHG
      s1 s5 XCHG
      DICTUSETB
      s3 s4 XCHG
      s1 s3 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    2 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      HASHCU
      SWAP
      s0 s7 XCHG
      s4 PUSH
      CHKSIGNU
      34 THROWIFNOT
      s0 s3 XCHG
      32 LDU
      DROP
      s3 PUSH
      OVER
      get_student CALLDICT
      NIP
      41 THROWIF
      ACCEPT
      s1 s3 XCHG
      create_student CALLDICT
      s3 s4 XCHG
      s1 s3 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    3 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      HASHCU
      s0 s2 XCHG
      s1 s7 XCHG
      s0 s4 XCHG
      CHKSIGNU
      34 THROWIFNOT
      s0 s2 XCHG
      256 LDU
      DROP
      ACCEPT
      s3 s4 XCHG
      s0 s3 XCHG
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    4 EQINT
    IFJMP:<{
      NIP
      s4 POP
      s0 s5 XCHG
      HASHCU
      SWAP
      s0 s6 XCHG
      s2 PUSH
      CHKSIGNU
      43 THROWIFNOT
      s0 s2 XCHG
      256 LDU
      DROP
      ACCEPT
      s1 s4 XCHG
      s0 s3 XCHG
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    SWAP
    5 EQINT
    IFJMP:<{
      s0 s6 XCHG
      HASHCU
      s0 s2 XCHG
      s1 s7 XCHG
      s0 s3 XCHG
      CHKSIGNU
      43 THROWIFNOT
      s0 s2 XCHG
      256 LDU
      DROP
      ACCEPT
      s3 s4 XCHG
      s1 s3 XCHG
      s0 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    404 THROW
    404 PUSHINT
  }>
  student_marks PROC:<{
    load_internal_data CALLDICT
    DROP
    NIP
    NIP
    NIP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      DROP
      PUSHNULL
    }>
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    IFNOTJMP:<{
      DROP
      PUSHNULL
    }>
    LDDICT
    DROP
    PUSHNULL
    0 PUSHINT
    UNTIL:<{
      32 PUSHINT
      s3 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        8 LDU
        LDREF
        DROP
        CTOS
        s2 PUSH
        s0 s2 XCHG
        SWAP
        TRIPLE
        SWAP
        s0 s3 XCHG
        CONS
      }>ELSE<{
        s1 s3 XCHG
        s0 s2 XCHG
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
  students PROC:<{
    load_internal_data CALLDICT
    DROP
    NIP
    NIP
    NIP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      PUSHNULL
    }>
    PUSHNULL
    0 PUSHINT
    UNTIL:<{
      32 PUSHINT
      s3 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      s2 POP
      OVER
      IF:<{
        DUP
        s0 s3 XCHG
        CONS
      }>ELSE<{
        s0 s2 XCHG
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
  seqno PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    DROP
    DROP
  }>
  info PROC:<{
    load_internal_data CALLDICT
    NIP
    NIP
    NIP
    NIP
    CTOS
  }>
}END>c
constant code

"TonUtil.fif" include

// Created by Andrei Marchenko <ftkvyn@gmail.com>

{ ."usage: " @' $0 type ." <workchain-id> <students-number> <registry-name> <teacher-key> <principal-key> [<filename-base>]" cr
  ."Creates a new register contract in specified workchain, with private key saved to or loaded from <filename-base>.pk" cr
  ."('new-register.pk' by default)" cr
  1 halt
} : usage
$# dup 5 < swap 6 > or ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 parse-int =: students-number // ToDo: generate students' ids
$3 =: registry-name
$4 =: teacher-key
$5 =: principal-key
def? $6 { @' $6 } { "new-register" } cond constant file-base

0 constant seqno

."Creating new register in workchain " wc . cr

teacher-key +".pk" load-generate-keypair 
constant teacher-key_priv
constant teacher-key_pub

principal-key +".pk" load-generate-keypair 
constant principal-key_priv
constant principal-key_pub

dictnew constant studs-dict

."Generating student ids " cr

// Had to be some kind of random ids, but as far as there is no
//   random generation in fift yet, just creating constant ones.
studs-dict
1000
{
    dup . cr // printing id 
    dup // duplicating id - one instance will be used for 
        // adding entry to the dict, other - to add and use in the
        // next iteration.  
    rot swap
    dictnew
    <b swap dict, b> <s
    2 exch
    32
    udict!
    drop // result of adding to the dict
    // over 3 roll 8 udict!+ 0= abort"key already added"
    swap
    121 +
} students-number times
."done generating student ids" cr

drop // counter
constant studs-dict

<b 
    seqno 32 u, 
    teacher-key_pub B,
    principal-key_pub B, // same key for teacher and principal
    studs-dict dict,
    <b registry-name $, b> ref,
 b> constant storage

<b b{0011} s, code ref, storage ref, null dict, b> constant state-init  // create StateInit
state-init .s
state-init ."StateInit: " <s csr. cr
state-init hash wc swap 2dup 2constant reg_addr
."new register address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
<b 0 4 u, // mode=0 initialization
   seqno 32 u, // seq_no
b>
constant new_contract_msg
new_contract_msg
.s cr
dup ."signing message: " <s csr. cr
new_contract_msg hash teacher-key_priv ed25519_sign_uint constant signature
drop
<b b{1000100} s, reg_addr addr, b{000010} s, state-init <s s, b{0} s, signature B, new_contract_msg ref, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved manual dns creating query to file " type .")" cr